import { ConnectButton } from "@rainbow-me/rainbowkit";
import { ethers, Contract} from "ethers";
import { useEffect, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useEthersSigner } from "../../hooks/useSigner";
// Contract address and ABI
const CONTRACT_ADDRESS = "0x4d198ff73D934250718Ce3497c0f2C55D7CF978C";
const CONTRACT_ABI = [
  {
    inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }],
    name: "depositXSushi",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "minSushiOut", type: "uint256" },
      { internalType: "uint24", name: "fee", type: "uint24" },
    ],
    name: "zapIn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "uint256", name: "shareAmount", type: "uint256" },
      { internalType: "uint256", name: "minTokenOut", type: "uint256" },
      { internalType: "uint24", name: "fee", type: "uint24" },
    ],
    name: "zapOut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const Home: NextPage = () => {
  const [contract, setContract] = useState<Contract | null>(null);
  const [depositAmount, setDepositAmount] = useState<string>("");
  const signer: any = useEthersSigner();
  // Connect to wallet and initialize ethers

  // Initialize contract instance
  useEffect(() => {
    console.log("BEFOREEEEEEEEEEEEEEEEEEE")
    if (signer) {
      console.log("SSSSSSSSSSSSSSSS", signer)

      const contractInstance = new Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);
      setContract(contractInstance);
    }
  }, [signer]); 
  
  const approveXSushi = async (amount: any) => {
    const xSushiToken = new ethers.Contract(
      "0x8798249c2e607446efb7ad49ec89dd1865ff4272", // xSUSHI token address
      ["function approve(address spender, uint256 amount) returns (bool)"],
      signer
    );
    await xSushiToken.approve(CONTRACT_ADDRESS, amount);
  };
  

  const deposit = async () => {
    if (contract && depositAmount && signer) {
      try {
        const amount = ethers.utils.parseEther(depositAmount);
  
        // Get xSUSHI balance of the connected wallet
        const xSushiToken = new ethers.Contract(
          "0x8798249c2e607446efb7ad49ec89dd1865ff4272",
          ["function balanceOf(address owner) view returns (uint256)"],
          signer
        );
        const balance = await xSushiToken.balanceOf(await signer.getAddress());
  
        if (balance.lt(amount)) {
          alert("Insufficient xSUSHI balance for deposit.");
          return;
        }
  
        await approveXSushi(amount);
  
        const tx = await contract.depositXSushi(amount, {
          gasLimit: ethers.utils.hexlify(200000), 
        });
        await tx.wait();
  
        alert("Deposit successful!");
        setDepositAmount(""); 
      } catch (error) {
        console.error("Deposit failed:", error);
        alert("Deposit failed. See console for details.");
      }
    } else {
      alert("Please connect wallet and enter a deposit amount");
    }
  };
  

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit DApp</title>
        <meta content="Generated by @rainbow-me/create-rainbowkit" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <div className={styles.connectButtonWrapper}>
        <ConnectButton />
      </div>

      <main className={styles.main}>
        <div className={styles.card}>
          <h1 className={styles.title}>Deposit Interface</h1>
          <p className={styles.description}>Connect with metamask and add the given rpc for eth and use the wallet that I provided</p>

          <input type="text" value={depositAmount} onChange={(e) => setDepositAmount(e.target.value)} placeholder="Enter deposit amount" className={styles.input} />

          <button className={styles.actionButton} onClick={deposit} disabled={!contract}>
            Deposit xSushi
          </button>
        </div>
      </main>

      <footer className={styles.footer}>
      </footer>
    </div>
  );
};

export default Home;
